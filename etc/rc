#
# rc - system startup script
#
HOME=/; export HOME
PATH=/bin:/sbin:/usr/sbin:/usr/ucb:/usr/bin; export PATH

# Show a startup banner
echo ''							>/dev/console 2>&1
echo ''							>/dev/console 2>&1
echo 'Starting the system.'				>/dev/console 2>&1
echo ''							>/dev/console 2>&1
date							>/dev/console 2>&1
echo ''							>/dev/console 2>&1

# Warn about power failure
if [ "$2" = powerfail ]; then
	echo ''						>/dev/console 2>&1
	echo 'WARNING - REBOOT AFTER POWER FAILURE'	>/dev/console 2>&1
	echo ''						>/dev/console 2>&1
fi

# Load configuration
echo 'Loading configuration.'				>/dev/console 2>&1
. /etc/rc.default
. /etc/rc.conf

# Initialize the ram disk
if [ "${ramd_enable}" = yes -a "${ramd_size}" = 0 ]; then
	echo ''						>/dev/console 2>&1
	echo 'WARNING - RAM DISK SIZE NOT SPECIFIED'	>/dev/console 2>&1
	echo ''						>/dev/console 2>&1
	ramd_enable=no
fi
if [ "${ramd_enable}" = yes ]; then
	echo 'Formatting ram disk.'			>/dev/console 2>&1
	mkfs -s "${ramd_size}" -i 1024 -m 2 -n 1 /dev/ram
fi

# Perform file system checks
if [ "$1" = autoboot ]; then
	echo 'Automatic boot... checking disks.'	>/dev/console 2>&1
	# this will *only* work if fsck can do your root file system
	# without a temporary file, and if the root file system is
	# checked alone in a pass by itself -- be careful!  This can
	# *seriously* mess you up.
	fsck -p -t /_FSCK_TMP_FILE			>/dev/console 2>&1
	case $? in
	0)
		echo ''					>/dev/console 2>&1
		date					>/dev/console 2>&1
		echo ''					>/dev/console 2>&1
		;;
	2)
		exit 1
		;;
	4)
		reboot -n
		;;
	8)
		echo 'Automatic reboot failed... help!'	>/dev/console 2>&1
		exit 1
		;;
	12)
		echo 'Reboot interrupted'		>/dev/console 2>&1
		exit 1
		;;
	*)
		echo 'Unknown error in reboot'		>/dev/console 2>&1
		exit 1
		;;
	esac
elif [ "$1" = fastboot ]; then
	echo 'Fast boot... skipping disk checks.'	>/dev/console 2>&1
else
	echo 'Normal boot... skipping disk checks.'	>/dev/console 2>&1
fi

# Unmount everything in case we have something mounted
umount -a

# Mount all filesystems marked for automatic mounting
echo 'Mounting all file systems.'			>/dev/console 2>&1
mount -a						>/dev/console 2>&1

# Finish initializing the ram disk
if [ "${ramd_enable}" = yes ]; then
	echo 'Preparing ram disk for use.'		>/dev/console 2>&1
	chown "${ramd_owner}.${ramd_group}" "${ramd_mount}"
	chmod "${ramd_mode}"                "${ramd_mount}"
fi

# Initialize disk quotas
echo 'Checking quotas.'					>/dev/console 2>&1
quotacheck -a						>/dev/console 2>&1
quotaon -a

# Update the device database
echo 'Updating device database.'			>/dev/console 2>&1
dev_mkdb

# Update the process database
echo 'Updating process database.'			>/dev/console 2>&1
ps -U							>/dev/console 2>&1

# Clean up tty permissions
echo 'Cleaning tty permissions.'			>/dev/console 2>&1
chmod 666 /dev/tty[pqrs]*

# Allow logins
echo 'Logins are now allowed.'				>/dev/console 2>&1
rm -f /etc/nologin

# Clean up uucp files
echo 'Cleaning uucp locks.'				>/dev/console 2>&1
rm -f /usr/spool/uucp/LCK.*
rm -f /usr/spool/uucp/STST/*

# Initialize networking
. /etc/rc.network

# Start syslogd when networking is available
if [ "${inet_enable}" = yes -a "${syslogd_enable}" = yes ]; then
	echo 'Starting syslogd.'			>/dev/console 2>&1
	rm -f /dev/log
	syslogd ${syslogd_flags}
fi

# Check for core dumps if /etc/crash exists
if [ -d /etc/crash ]; then
	echo 'Checking for core dumps.'			>/dev/console 2>&1
	savecore /etc/crash				>/dev/console 2>&1
fi

# Warn about ongoing vipw sessions
if [ -s /etc/ptmp ]; then
	echo ''						>/dev/console 2>&1
	echo 'WARNING - PASSWD FILE NEEDS RECOVERY'	>/dev/console 2>&1
	echo ''						>/dev/console 2>&1
fi

# Check editor recovery
echo 'Checking for editor recovery.'			>/dev/console 2>&1
(cd /tmp; /usr/sbin/expreserve -a)

# Clean tmp directory
echo 'Cleaning temporary files.'			>/dev/console 2>&1
(cd /tmp; find . ! -name . ! -name lost+found ! -name quotas -exec rm -r {} \; )

# Start daemons
. /etc/rc.daemons

# Run local script
/etc/rc.local

# Finished
echo ''							>/dev/console 2>&1
date							>/dev/console 2>&1
echo ''							>/dev/console 2>&1
echo 'System startup has finished.'			>/dev/console 2>&1

# Exit with success
exit 0
